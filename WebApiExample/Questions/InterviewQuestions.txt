Вопросы для собеседования на Senior .NET Developer

1. Вопросы по языку C#

1.1. Managed и Unmanaged ресурсы в .NET
    Managed ресурсы:
    - Управляются сборщиком мусора (Garbage Collector)
    - Автоматически очищаются
    - Примеры: объекты классов, строки, массивы

   Unmanaged ресурсы:
   - Не управляются сборщиком мусора
   - Требуют явной очистки
   - Примеры: файлы, соединения с БД, сокеты

   IDisposable:
   - Интерфейс для освобождения unmanaged ресурсов
   - Реализует метод Dispose()
   - Используется с конструкцией using

   using:
   - Автоматически вызывает Dispose()
   - Гарантирует освобождение ресурсов даже при исключениях
   - Синтаксический сахар для try-finally

   SafeHandle:
   - Безопасная обертка для unmanaged ресурсов
   - Предотвращает утечки памяти
   - Автоматически освобождает ресурсы

   DisposeAsync:
   - Асинхронная версия Dispose()
   - Возвращает ValueTask
   - Полезен при асинхронной работе с ресурсами

   Практическая часть:
   - Реализация IDisposable в сервисе
   - Использование using
   - Асинхронное освобождение ресурсов

1.2. Garbage Collector и как он работает
   Фазы сборки мусора:
   - Mark (Маркировка) - определение живых объектов
   - Sweep (Очистка) - удаление неиспользуемых объектов
   - Compact (Сжатие) - дефрагментация памяти

   Поколения в GC:
   - Gen 0 - новые объекты
   - Gen 1 - объекты, пережившие одну сборку
   - Gen 2 - долгоживущие объекты

   Large Object Heap (LOH):
   - Отдельная область для больших объектов (>85KB)
   - Не сжимается при сборке мусора
   - Может вызывать фрагментацию

   Конфигурация GC:
   - Server GC vs Workstation GC
   - Concurrent GC
   - Background GC
   - GC Latency Modes

   Практическая часть:
   - Мониторинг GC
   - Оптимизация памяти
   - Анализ производительности

1.3. Как работает Equals в C#
   Сравнение ссылочных типов:
   - Equals() сравнивает содержимое объектов
   - == сравнивает ссылки
   - Переопределение Equals требует переопределения GetHashCode

   Сравнение значимых типов:
   - Equals() сравнивает значения
   - == сравнивает значения
   - Реализация по умолчанию через рефлексию

   IEquatable<T>:
   - Типобезопасное сравнение
   - Лучшая производительность
   - Избегает боксинга

   Records:
   - Автоматическая реализация Equals
   - Сравнение по значению
   - Иммутабельность
   - Синтаксис с позиционными параметрами
   - with выражения

   Практическая часть:
   - Реализация Equals в классе
   - Создание record
   - Сравнение объектов

1.4. Работа с делегатами и событиями в .NET
   Делегаты:
   - Определение делегатов
   - Создание экземпляров
   - Многоадресные делегаты
   - Ковариантность и контравариантность
   - Лямбда-выражения
   - Анонимные методы

   События:
   - Определение событий
   - Подписка на события
   - Отписка от событий
   - Модификаторы доступа
   - Паттерн Observer
   - Лучшие практики

   Лямбда-выражения:
   - Синтаксис
   - Замыкания
   - Локальные переменные
   - this в лямбдах
   - Оптимизация
   - Производительность

   Асинхронные делегаты:
   - BeginInvoke/EndInvoke
   - IAsyncResult
   - Callback
   - Отмена операций
   - Обработка ошибок
   - Лучшие практики

   Лучшие практики:
   - Выбор подхода
   - Обработка ошибок
   - Утечки памяти
   - Производительность
   - Потокобезопасность
   - Тестирование

   Практическая часть:
   - Создание делегатов
   - Реализация событий
   - Асинхронные операции
   - Оптимизация производительности 

1.5. Работа с атрибутами в .NET
   Создание атрибутов:
   - Наследование от Attribute
   - Позиционные параметры
   - Именованные параметры
   - Множественные атрибуты
   - Наследование атрибутов
   - Лучшие практики

   Применение атрибутов:
   - К классам
   - К методам
   - К свойствам
   - К полям
   - К параметрам
   - К сборкам

   Получение атрибутов:
   - GetCustomAttributes
   - GetCustomAttribute
   - IsDefined
   - Рефлексия
   - Производительность
   - Кэширование

   Встроенные атрибуты:
   - Obsolete
   - Serializable
   - NonSerialized
   - DllImport
   - Conditional
   - AttributeUsage

   Лучшие практики:
   - Выбор подхода
   - Производительность
   - Кэширование
   - Документация
   - Тестирование
   - Безопасность

   Практическая часть:
   - Создание атрибутов
   - Применение атрибутов
   - Получение атрибутов
   - Оптимизация производительности 

1.6. Работа с коллекциями в .NET
   List<T>:
   - Добавление элементов
   - Удаление элементов
   - Поиск элементов
   - Сортировка
   - Фильтрация
   - Производительность

   Dictionary<TKey, TValue>:
   - Добавление пар
   - Удаление пар
   - Поиск по ключу
   - Проверка существования
   - Итерация
   - Производительность

   HashSet<T>:
   - Уникальные элементы
   - Добавление/удаление
   - Операции с множествами
   - Проверка существования
   - Производительность
   - Применение

   Queue<T>:
   - FIFO принцип
   - Enqueue/Dequeue
   - Peek
   - Очередь с приоритетами
   - Производительность
   - Применение

   Stack<T>:
   - LIFO принцип
   - Push/Pop
   - Peek
   - Производительность
   - Применение
   - Рекурсия

   Concurrent коллекции:
   - ConcurrentDictionary
   - ConcurrentQueue
   - ConcurrentStack
   - ConcurrentBag
   - BlockingCollection
   - Синхронизация

   Лучшие практики:
   - Выбор коллекции
   - Инициализация
   - Обработка ошибок
   - Производительность
   - Потокобезопасность
   - Тестирование

   Практическая часть:
   - Работа с коллекциями
   - Оптимизация производительности
   - Потокобезопасность
   - Тестирование 

1.7. Работа с потоками в .NET
   Thread:
   - Создание потоков
   - Управление потоками
   - Приоритеты
   - Состояния потока
   - Локальное хранилище
   - Синхронизация

   ThreadPool:
   - Пул потоков
   - QueueUserWorkItem
   - RegisterWaitForSingleObject
   - GetAvailableThreads
   - GetMaxThreads
   - Оптимизация

   BackgroundWorker:
   - Создание воркера
   - События
   - Отмена операции
   - Прогресс выполнения
   - Обработка ошибок
   - Устаревшие методы

   Task:
   - Создание задач
   - Состояния задачи
   - Возвращаемые значения
   - Отмена задач
   - Исключения
   - Продолжения

   async/await:
   - Синтаксис
   - Контекст синхронизации
   - ConfigureAwait
   - Исключения
   - Deadlocks
   - Производительность

   Синхронизация:
   - lock
   - Monitor
   - Mutex
   - Semaphore
   - EventWaitHandle
   - Interlocked

   Лучшие практики:
   - Выбор подхода
   - Обработка ошибок
   - Отмена операций
   - Производительность
   - Deadlocks
   - Тестирование

   Практическая часть:
   - Создание потоков
   - Асинхронные операции
   - Синхронизация
   - Оптимизация производительности 

1.8. Pattern Matching и нововведения в C#
   Pattern Matching:
   - is с паттернами
   - switch с паттернами
   - var паттерн
   - constant паттерн
   - type паттерн
   - property паттерн
   - tuple паттерн
   - positional паттерн
   - list паттерн
   - Лучшие практики

   Нововведения C# 12:
   - Primary constructors
   - Collection expressions
   - Alias any type
   - Default lambda parameters
   - Лучшие практики

   Нововведения C# 11:
   - Raw string literals
   - Generic attributes
   - Required members
   - File-scoped types
   - List patterns
   - Лучшие практики

   Нововведения C# 10:
   - Record structs
   - Global using directives
   - File-scoped namespaces
   - Extended property patterns
   - Constant interpolated strings
   - Лучшие практики

   Нововведения C# 9:
   - Records
   - Init-only setters
   - Top-level statements
   - Pattern matching enhancements
   - Target-typed new expressions
   - Лучшие практики

   Практическая часть:
   - Использование pattern matching
   - Применение нововведений
   - Оптимизация кода
   - Рефакторинг 

2. Вопросы по фреймворку .NET

2.1. Dependency Injection в .NET
   Service Lifetime:
   - Singleton - один экземпляр на все время работы приложения
   - Scoped - один экземпляр на запрос
   - Transient - новый экземпляр при каждом запросе

   Регистрация сервисов:
   - AddSingleton<TService, TImplementation>
   - AddScoped<TService, TImplementation>
   - AddTransient<TService, TImplementation>
   - Регистрация через интерфейсы
   - Регистрация через фабрики

   Внедрение зависимостей:
   - Constructor Injection
   - Property Injection
   - Method Injection
   - Service Locator (антипаттерн)

   Factory Pattern:
   - IHttpClientFactory
   - ILoggerFactory
   - Custom Factories
   - Options Pattern

   Практическая часть:
   - Регистрация сервисов
   - Внедрение зависимостей
   - Использование фабрик

2.2. SOLID принципы
   Single Responsibility Principle:
   - Класс должен иметь только одну причину для изменения
   - Разделение ответственности
   - Избегание "божественных" классов

   Open/Closed Principle:
   - Классы должны быть открыты для расширения, но закрыты для изменения
   - Использование абстракций
   - Стратегия и шаблонный метод

   Liskov Substitution Principle:
   - Объекты базового класса могут быть заменены объектами производных классов
   - Контракты и предусловия
   - Ковариантность и контравариантность

   Interface Segregation Principle:
   - Клиенты не должны зависеть от методов, которые они не используют
   - Маленькие интерфейсы
   - Избегание "жирных" интерфейсов

   Dependency Inversion Principle:
   - Зависимости должны быть от абстракций, а не от конкретных реализаций
   - Внедрение зависимостей
   - Абстрактные фабрики

   Практическая часть:
   - Рефакторинг кода с учетом SOLID
   - Применение паттернов проектирования
   - Анализ нарушений принципов

2.3. Паттерны проектирования
   Creational (Создающие):
   - Singleton - единственный экземпляр класса
   - Factory Method - создание объектов через фабричный метод
   - Abstract Factory - семейство связанных объектов
   - Builder - пошаговое создание сложного объекта
   - Prototype - клонирование объектов

   Structural (Структурные):
   - Adapter - адаптация интерфейса
   - Bridge - разделение абстракции и реализации
   - Composite - древовидная структура
   - Decorator - динамическое добавление поведения
   - Facade - упрощенный интерфейс
   - Flyweight - переиспользование объектов
   - Proxy - заместитель объекта

   Behavioral (Поведенческие):
   - Chain of Responsibility - цепочка обработчиков
   - Command - инкапсуляция запроса
   - Iterator - последовательный доступ к элементам
   - Mediator - посредник между объектами
   - Memento - сохранение состояния
   - Observer - подписка на события
   - State - изменение поведения при изменении состояния
   - Strategy - семейство алгоритмов
   - Template Method - шаблонный метод
   - Visitor - добавление операций

   Антипаттерны:
   - God Object
   - Spaghetti Code
   - Copy-Paste Programming
   - Golden Hammer
   - Cargo Cult Programming

   Практическая часть:
   - Реализация паттернов в проекте
   - Анализ использования паттернов
   - Рефакторинг с применением паттернов

2.4. LINQ и его отличие от SQL
   Отложенное выполнение:
   - Запросы выполняются только при перечислении
   - Ленивая загрузка данных
   - Оптимизация производительности

   Методы расширения:
   - Where, Select, OrderBy
   - GroupBy, Join, Union
   - Aggregate, Count, Any
   - Skip, Take, First

   Лямбда-выражения:
   - Синтаксис => 
   - Делегаты и Expression Trees
   - Замыкания
   - Локальные функции

   Операторы LINQ:
   - Фильтрация (Where)
   - Проекция (Select)
   - Сортировка (OrderBy)
   - Группировка (GroupBy)
   - Объединение (Join)
   - Агрегация (Aggregate)

   IQueryable vs IEnumerable:
   - IQueryable для работы с БД
   - IEnumerable для работы в памяти
   - Expression Trees
   - Трансляция в SQL

   Оптимизация запросов:
   - Использование AsNoTracking
   - Включение и выключение отслеживания
   - Кэширование результатов
   - Оптимизация N+1 запросов

   Производительность:
   - Материализация запросов
   - Буферизация результатов
   - Параллельное выполнение
   - Асинхронные операции

   Практическая часть:
   - Создание сложных LINQ запросов
   - Оптимизация производительности
   - Работа с Entity Framework 

2.5. Асинхронное программирование в C#
   async/await:
   - Синтаксический сахар для асинхронного программирования
   - Преобразование в конечный автомат
   - Возврат Task/Task<T>
   - Исключения в асинхронном коде

   Task и Task<T>:
   - Представление асинхронной операции
   - Состояния Task (Created, Running, Completed, Faulted)
   - Методы ContinueWith, WhenAll, WhenAny
   - Отмена операций

   ConfigureAwait:
   - Управление контекстом синхронизации
   - ConfigureAwait(false) для библиотечного кода
   - Избегание deadlocks
   - Производительность

   CancellationToken:
   - Отмена длительных операций
   - Передача токена через стек вызовов
   - Регистрация callback'ов
   - Создание связанных токенов

   ValueTask:
   - Оптимизация для синхронных операций
   - Меньше аллокаций памяти
   - Использование в библиотеках
   - Кэширование результатов

   Параллельное выполнение:
   - Task.Run vs Task.Factory.StartNew
   - Параллельные циклы
   - Асинхронные коллекции
   - Синхронизация потоков

   Deadlocks и как их избежать:
   - Причины возникновения
   - async void
   - ConfigureAwait
   - Лучшие практики

   Практическая часть:
   - Реализация асинхронных методов
   - Обработка отмены операций
   - Параллельное выполнение задач
   - Отладка асинхронного кода 

2.6. Unit тесты в .NET
   Фреймворки:
   - xUnit - современный и гибкий
   - NUnit - классический подход
   - MSTest - встроен в Visual Studio
   - Сравнение фреймворков

   Структура тестов:
   - Arrange-Act-Assert (AAA)
   - Тестовые классы и методы
   - Атрибуты для тестов
   - Тестовые данные

   Моки и стабы:
   - Moq - популярный фреймворк
   - NSubstitute - альтернативный подход
   - Setup и Verify
   - Callback и Returns

   Изоляция:
   - Изоляция зависимостей
   - Mock объектов
   - Stub объектов
   - Fake объектов

   Лучшие практики:
   - Именование тестов
   - DRY vs DAMP
   - Тест одного поведения
   - Независимость тестов

   Практическая часть:
   - Написание тестов для сервисов
   - Мокирование зависимостей
   - Проверка исключений
   - Тестирование асинхронного кода 

2.7. Логирование в .NET
   ILogger и ILoggerFactory:
   - Интерфейс ILogger
   - Фабрика логгеров
   - Категории логгеров
   - Внедрение зависимостей

   Уровни логирования:
   - Trace - детальная информация
   - Debug - отладочная информация
   - Information - общая информация
   - Warning - предупреждения
   - Error - ошибки
   - Critical - критические ошибки
   - None - отключение логирования

   Провайдеры логов:
   - Console
   - Debug
   - EventLog
   - File
   - Azure
   - Elasticsearch
   - Serilog
   - NLog

   Структурированное логирование:
   - Логирование объектов
   - Форматирование сообщений
   - Категории и теги
   - Контекст логов

   Фильтрация логов:
   - Фильтры по уровню
   - Фильтры по категории
   - Фильтры по провайдеру
   - Кастомные фильтры

   Логирование в файлы:
   - Ротация логов
   - Форматирование
   - Размер файлов
   - Архивация

   Логирование в БД:
   - Таблицы логов
   - Индексация
   - Очистка старых логов
   - Запросы к логам

   Логирование в облако:
   - Azure Application Insights
   - AWS CloudWatch
   - Google Cloud Logging
   - ELK Stack

   Практическая часть:
   - Настройка логирования
   - Создание кастомных провайдеров
   - Анализ логов
   - Мониторинг приложения 

2.8. Middleware в ASP.NET Core
   Pipeline обработки запросов:
   - Request Pipeline
   - Response Pipeline
   - Next() делегат
   - Порядок выполнения

   Встроенные middleware:
   - Authentication
   - Authorization
   - CORS
   - Routing
   - Static Files
   - Exception Handling
   - HTTPS Redirection
   - Response Compression

   Создание custom middleware:
   - Класс middleware
   - RequestDelegate
   - Invoke/InvokeAsync
   - Dependency Injection

   Order middleware:
   - Важность порядка
   - Рекомендуемый порядок
   - Влияние на производительность
   - Отладка порядка

   Short-circuiting:
   - Прерывание pipeline
   - Условия прерывания
   - Оптимизация
   - Безопасность

   Branching:
   - Map
   - MapWhen
   - UseWhen
   - Условные ветви

   Use, Run, Map:
   - Use - добавление middleware
   - Run - терминальный middleware
   - Map - ветвление pipeline
   - Комбинация методов

   Лучшие практики:
   - Переиспользование middleware
   - Обработка ошибок
   - Производительность
   - Тестирование

   Практическая часть:
   - Создание custom middleware
   - Настройка pipeline
   - Обработка ошибок
   - Оптимизация производительности 

2.9. Работа с JSON в .NET
   System.Text.Json:
   - JsonSerializer
   - JsonDocument
   - JsonElement
   - JsonNode
   - Опции сериализации
   - Производительность

   Newtonsoft.Json:
   - JObject
   - JArray
   - JToken
   - JsonConvert
   - Настройки сериализации
   - Расширения

   Сериализация/десериализация:
   - Object to JSON
   - JSON to Object
   - Коллекции
   - Сложные объекты
   - Циклические ссылки
   - Null значения

   Кастомные конвертеры:
   - JsonConverter
   - JsonConverterFactory
   - Регистрация конвертеров
   - Конвертация типов
   - Валидация
   - Форматирование

   Атрибуты для JSON:
   - JsonPropertyName
   - JsonIgnore
   - JsonInclude
   - JsonNumberHandling
   - JsonExtensionData
   - JsonConstructor

   Оптимизация производительности:
   - Source Generation
   - Utf8JsonWriter
   - Utf8JsonReader
   - Пул буферов
   - Кэширование
   - Асинхронные операции

   Лучшие практики:
   - Выбор библиотеки
   - Обработка ошибок
   - Безопасность
   - Версионирование
   - Миграция между библиотеками

   Практическая часть:
   - Сериализация объектов
   - Создание конвертеров
   - Оптимизация производительности
   - Работа с API 

2.10. Работа с XML в .NET
   System.Xml:
   - XmlDocument
   - XmlNode
   - XmlElement
   - XmlAttribute
   - XmlNamespaceManager
   - XmlReader/XmlWriter

   XDocument:
   - Создание документа
   - Чтение документа
   - Модификация документа
   - Сохранение документа
   - Валидация
   - Производительность

   XElement:
   - Создание элементов
   - Чтение элементов
   - Модификация элементов
   - Удаление элементов
   - Атрибуты
   - Пространства имен

   XPath:
   - Синтаксис XPath
   - Выборка узлов
   - Фильтрация
   - Функции
   - Операторы
   - Производительность

   XSLT:
   - Создание шаблонов
   - Преобразование XML
   - Условные конструкции
   - Циклы
   - Функции
   - Параметры

   Валидация схемы:
   - XSD схемы
   - DTD
   - Валидация при чтении
   - Валидация при записи
   - Обработка ошибок
   - Производительность

   Оптимизация:
   - Пул буферов
   - Кэширование
   - Асинхронные операции
   - Параллельная обработка
   - Память
   - Производительность

   Лучшие практики:
   - Выбор подхода
   - Обработка ошибок
   - Безопасность
   - Пространства имен
   - Валидация
   - Производительность

   Практическая часть:
   - Создание XML документов
   - Чтение и модификация
   - Валидация
   - Оптимизация производительности 

2.11. Работа с сетью в .NET
   HttpClient:
   - Создание и настройка
   - Методы запросов (GET, POST, PUT, DELETE)
   - Заголовки и куки
   - Таймауты
   - Отмена запросов
   - Обработка ответов
   - Пул соединений
   - Лучшие практики

   WebClient:
   - Синхронные методы
   - Асинхронные методы
   - Загрузка файлов
   - Отмена операций
   - Обработка ошибок
   - Устаревшие методы
   - Миграция на HttpClient

   HttpWebRequest:
   - Создание запроса
   - Настройка параметров
   - Отправка данных
   - Получение ответа
   - Прокси
   - Сертификаты
   - Устаревшие методы
   - Миграция на HttpClient

   Практическая часть:
   - Создание HTTP клиента
   - Отправка запросов
   - Обработка ответов
   - Обработка ошибок 

2.12. Работа с файлами в .NET
   File и FileInfo:
   - Создание файлов
   - Удаление файлов
   - Копирование файлов
   - Перемещение файлов
   - Получение информации
   - Атрибуты файлов
   - Права доступа

   Directory и DirectoryInfo:
   - Создание директорий
   - Удаление директорий
   - Перечисление файлов
   - Перечисление директорий
   - Получение информации
   - Атрибуты директорий
   - Права доступа

   Path:
   - Формирование путей
   - Нормализация путей
   - Получение расширения
   - Получение имени файла
   - Получение директории
   - Объединение путей
   - Проверка путей

   FileStream:
   - Открытие файлов
   - Режимы доступа
   - Чтение данных
   - Запись данных
   - Позиция в файле
   - Блокировка файлов
   - Буферизация

   StreamReader/StreamWriter:
   - Чтение текста
   - Запись текста
   - Кодировки
   - Буферизация
   - Асинхронные операции
   - Обработка ошибок

   BinaryReader/BinaryWriter:
   - Чтение бинарных данных
   - Запись бинарных данных
   - Типы данных
   - Позиция в потоке
   - Буферизация
   - Обработка ошибок

   Асинхронные операции:
   - ReadAsync/WriteAsync
   - FlushAsync
   - Отмена операций
   - Обработка ошибок
   - Производительность
   - Лучшие практики

   Лучшие практики:
   - Использование using
   - Обработка ошибок
   - Безопасность
   - Производительность
   - Кроссплатформенность
   - Пути к файлам

   Практическая часть:
   - Работа с файлами
   - Работа с директориями
   - Обработка ошибок
   - Оптимизация производительности 

2.13. Работа с логами в .NET
   ILogger:
   - Уровни логирования
   - Категории логов
   - Форматирование
   - Фильтрация
   - Конфигурация
   - Лучшие практики

   Serilog:
   - Установка и настройка
   - Синки
   - Форматирование
   - Структурированные данные
   - Обогащение логов
   - Производительность

   NLog:
   - Конфигурация
   - Таргеты
   - Лейауты
   - Фильтры
   - Асинхронная запись
   - Производительность

   Log4Net:
   - Конфигурация
   - Аппендеры
   - Лейауты
   - Фильтры
   - Асинхронная запись
   - Производительность

   Структурированное логирование:
   - JSON формат
   - Контекстные данные
   - Корреляция
   - Агрегация
   - Анализ
   - Мониторинг

   Лучшие практики:
   - Выбор фреймворка
   - Уровни логирования
   - Контекстные данные
   - Производительность
   - Ротация логов
   - Безопасность

   Практическая часть:
   - Настройка логирования
   - Структурированные логи
   - Анализ логов
   - Оптимизация производительности 

2.14. Работа с фоновыми задачами в .NET
   IHostedService:
   - StartAsync
   - StopAsync
   - Жизненный цикл
   - Отмена операций
   - Обработка ошибок
   - Лучшие практики

   BackgroundService:
   - ExecuteAsync
   - Периодические задачи
   - Отмена операций
   - Обработка ошибок
   - Логирование
   - Мониторинг

   Hangfire:
   - Установка и настройка
   - Fire-and-forget
   - Отложенные задачи
   - Периодические задачи
   - Мониторинг
   - Производительность

   Quartz.NET:
   - Установка и настройка
   - Jobs
   - Triggers
   - Scheduler
   - Мониторинг
   - Производительность

   Лучшие практики:
   - Выбор подхода
   - Обработка ошибок
   - Отмена операций
   - Производительность
   - Масштабирование
   - Мониторинг

   Практическая часть:
   - Создание фоновых задач
   - Периодические задачи
   - Мониторинг
   - Оптимизация производительности 

2.15. Работа с метриками в .NET
   Prometheus:
   - Установка и настройка
   - Типы метрик (Counter, Gauge, Histogram)
   - Метки (Labels)
   - Экспорт метрик
   - Scraping
   - Производительность

   Grafana:
   - Установка и настройка
   - Подключение к Prometheus
   - Создание дашбордов
   - Запросы PromQL
   - Алерты
   - Визуализация

   Метрики приложения:
   - HTTP запросы
   - Время ответа
   - Ошибки
   - Использование памяти
   - Количество потоков
   - GC метрики

   Кастомные метрики:
   - Бизнес-метрики
   - Метрики производительности
   - Метрики ошибок
   - Метрики ресурсов
   - Метрики очередей
   - Метрики кэша

   Лучшие практики:
   - Выбор метрик
   - Именование метрик
   - Метки
   - Частота сбора
   - Хранение данных
   - Алертинг

   Практическая часть:
   - Настройка Prometheus
   - Создание дашбордов
   - Мониторинг приложения
   - Настройка алертов 

3. Вопросы по внешним технологиям

3.1. Контейнеризация в .NET
   Docker:
   - Контейнеры и образы
   - Docker Engine
   - Docker Registry
   - Docker CLI
   - Docker Desktop

   Docker Compose:
   - Определение сервисов
   - Переменные окружения
   - Тома и сети
   - Зависимости сервисов

   Multi-stage builds:
   - Оптимизация размера образов
   - Разделение сборки и runtime
   - Кэширование слоев
   - Безопасность

   Dockerfile:
   - Базовые образы
   - Инструкции сборки
   - Копирование файлов
   - Настройка окружения
   - Публичные порты
   - Точка входа

   .dockerignore:
   - Исключение файлов
   - Оптимизация сборки
   - Безопасность
   - Размер контекста

   Docker Hub:
   - Публичные образы
   - Приватные репозитории
   - Теги и версионирование
   - Автоматическая сборка

   Docker Desktop:
   - Управление контейнерами
   - Мониторинг ресурсов
   - Настройка сети
   - Интеграция с IDE

   Docker Swarm:
   - Кластеризация
   - Service Discovery
   - Load Balancing
   - Rolling Updates

   Практическая часть:
   - Создание Dockerfile
   - Настройка Docker Compose
   - Оптимизация образов
   - Развертывание приложения 

3.2. GitLab CI
   Основные концепции:
   - Pipeline
   - Jobs
   - Stages
   - Artifacts
   - Cache
   - Variables

   .gitlab-ci.yml:
   - Структура файла
   - Определение stages
   - Настройка jobs
   - Условия выполнения
   - Переменные окружения

   Сборка .NET приложения:
   - Восстановление пакетов
   - Компиляция
   - Тестирование
   - Публикация
   - Создание артефактов

   Развертывание:
   - Docker образы
   - Kubernetes
   - Azure
   - AWS
   - Self-hosted runners

   Оптимизация:
   - Кэширование NuGet пакетов
   - Параллельное выполнение
   - Условные этапы
   - Время выполнения

   Безопасность:
   - Переменные CI/CD
   - Токены доступа
   - Секреты
   - Разграничение доступа

   Мониторинг:
   - Статус pipeline
   - Метрики выполнения
   - Уведомления
   - Отчеты

   Практическая часть:
   - Настройка pipeline
   - Автоматизация сборки
   - Развертывание приложения
   - Мониторинг CI/CD 

3.3. REST API
   HTTP методы:
   - GET - получение данных
   - POST - создание ресурса
   - PUT - полное обновление
   - PATCH - частичное обновление
   - DELETE - удаление ресурса
   - HEAD - получение заголовков
   - OPTIONS - получение поддерживаемых методов

   Статус коды:
   - 2xx - успешные запросы
   - 3xx - перенаправления
   - 4xx - ошибки клиента
   - 5xx - ошибки сервера
   - Кастомные статус коды

   Версионирование:
   - URL версионирование
   - Заголовок версии
   - Media type версионирование
   - Query string версионирование
   - Обратная совместимость

   Документация (Swagger):
   - OpenAPI спецификация
   - Swagger UI
   - Swagger Annotations
   - Генерация документации
   - Примеры запросов

   Маршрутизация:
   - Атрибутная маршрутизация
   - Conventional маршрутизация
   - Параметры маршрута
   - Ограничения маршрута
   - Группировка маршрутов

   Валидация:
   - Data Annotations
   - Fluent Validation
   - Модель состояния
   - Кастомные валидаторы
   - Валидация на уровне API

   Форматы данных:
   - JSON
   - XML
   - Form Data
   - Multipart Form Data
   - Content Negotiation

   Безопасность:
   - Аутентификация
   - Авторизация
   - Rate Limiting
   - API ключи
   - HTTPS

   Практическая часть:
   - Создание REST API
   - Документирование API
   - Валидация запросов
   - Тестирование API 

3.4. Обработка ошибок в .NET
   Исключения:
   - System.Exception
   - Встроенные исключения
   - Stack trace
   - Inner exceptions
   - Exception filters
   - Exception handling blocks

   Try-catch-finally:
   - Блок try
   - Блок catch
   - Блок finally
   - Фильтры исключений
   - Вложенные блоки
   - Перехват исключений

   Custom исключения:
   - Создание классов исключений
   - Наследование от Exception
   - Конструкторы
   - Сериализация
   - Лучшие практики

   Middleware для обработки ошибок:
   - UseExceptionHandler
   - Developer Exception Page
   - Custom middleware
   - Обработка разных типов ошибок
   - Логирование

   Логирование ошибок:
   - Уровни логирования
   - Контекст ошибки
   - Структурированное логирование
   - Агрегация ошибок
   - Мониторинг

   Глобальная обработка:
   - AppDomain.UnhandledException
   - TaskScheduler.UnobservedTaskException
   - Application.ThreadException
   - Global error handler
   - Fallback механизмы

   Возврат ошибок в API:
   - Problem Details
   - Статус коды
   - Формат ответа
   - Детали ошибки
   - Безопасность

   Лучшие практики:
   - Не перехватывать все исключения
   - Правильная иерархия исключений
   - Очистка ресурсов
   - Асинхронная обработка
   - Безопасность

   Практическая часть:
   - Создание custom исключений
   - Настройка middleware
   - Логирование ошибок
   - Обработка в API 

3.5. Kubernetes в .NET
   Pods:
   - Создание и управление
   - Жизненный цикл
   - Проверки здоровья
   - Перезапуск
   - Логи
   - Ресурсы

   Services:
   - ClusterIP
   - NodePort
   - LoadBalancer
   - ExternalName
   - Service Discovery
   - Балансировка нагрузки

   Deployments:
   - Создание и обновление
   - Rollback
   - Scaling
   - ReplicaSets
   - Стратегии развертывания
   - Мониторинг

   ConfigMaps:
   - Создание
   - Использование
   - Обновление
   - Монтирование
   - Переменные окружения
   - Лучшие практики

   Secrets:
   - Создание
   - Использование
   - Обновление
   - Монтирование
   - Безопасность
   - Лучшие практики

   Лучшие практики:
   - Архитектура приложения
   - Конфигурация
   - Масштабирование
   - Мониторинг
   - Безопасность
   - CI/CD

   Практическая часть:
   - Развертывание приложения
   - Настройка сервисов
   - Управление конфигурацией
   - Мониторинг 

3.6. OpenID Connect в .NET
   Identity Server:
   - Установка и настройка
   - Конфигурация
   - Клиенты
   - Ресурсы
   - Identity
   - API

   Duende Identity Server:
   - Установка и настройка
   - Конфигурация
   - Клиенты
   - Ресурсы
   - Identity
   - API

   Claims:
   - Типы claims
   - Создание claims
   - Валидация claims
   - Кастомные claims
   - Лучшие практики
   - Безопасность

   Scopes:
   - OpenID scopes
   - API scopes
   - Identity scopes
   - Кастомные scopes
   - Валидация
   - Лучшие практики

   Identity:
   - Пользователи
   - Роли
   - Политики
   - Ресурсы
   - Валидация
   - Безопасность

   Лучшие практики:
   - Архитектура
   - Конфигурация
   - Безопасность
   - Масштабирование
   - Мониторинг
   - Тестирование

   Практическая часть:
   - Настройка Identity Server
   - Реализация аутентификации
   - Управление пользователями
   - Безопасность 

3.7. LDAP в .NET
   System.DirectoryServices:
   - Установка и настройка
   - Подключение
   - Поиск
   - Аутентификация
   - Модификация
   - Лучшие практики

   Novell.Directory.Ldap:
   - Установка и настройка
   - Подключение
   - Поиск
   - Аутентификация
   - Модификация
   - Лучшие практики

   Аутентификация:
   - Простая аутентификация
   - SASL
   - SSL/TLS
   - Kerberos
   - NTLM
   - Лучшие практики

   Поиск:
   - LDAP фильтры
   - Атрибуты
   - Scope
   - Сортировка
   - Пагинация
   - Производительность

   Группы:
   - Членство в группах
   - Вложенные группы
   - Управление группами
   - Права доступа
   - Валидация
   - Лучшие практики

   Лучшие практики:
   - Безопасность
   - Производительность
   - Кэширование
   - Обработка ошибок
   - Мониторинг
   - Тестирование

   Практическая часть:
   - Подключение к LDAP
   - Аутентификация
   - Поиск пользователей
   - Управление группами 

3.8. Kafka в .NET
   Confluent.Kafka:
   - Установка и настройка
   - Конфигурация
   - Подключение
   - Обработка ошибок
   - Мониторинг
   - Лучшие практики

   Topics:
   - Создание топиков
   - Конфигурация
   - Партиционирование
   - Репликация
   - Retention
   - Лучшие практики

   Partitions:
   - Создание партиций
   - Распределение
   - Балансировка
   - Offset
   - Коммиты
   - Лучшие практики

   Producers:
   - Создание
   - Конфигурация
   - Отправка сообщений
   - Батчинг
   - Компрессия
   - Лучшие практики

   Consumers:
   - Создание
   - Конфигурация
   - Получение сообщений
   - Группы
   - Балансировка
   - Лучшие практики

   Лучшие практики:
   - Архитектура
   - Производительность
   - Надежность
   - Масштабирование
   - Мониторинг
   - Тестирование

   Практическая часть:
   - Настройка Kafka
   - Создание топиков
   - Отправка сообщений
   - Получение сообщений 

4. Вопросы по БД и SQL

4.1. Entity Framework Core
   Code First vs Database First:
   - Code First - создание БД из кода
   - Database First - создание кода из БД
   - Миграции и обновление схемы
   - Fluent API и Data Annotations

   Миграции:
   - Создание миграций
   - Применение миграций
   - Откат миграций
   - Управление версиями БД

   Отслеживание изменений:
   - Change Tracker
   - Состояния сущностей
   - SaveChanges
   - Отключение отслеживания

   Ленивая загрузка:
   - Virtual навигационные свойства
   - Прокси-классы
   - N+1 проблема
   - Оптимизация запросов

   Включенная загрузка:
   - Include
   - ThenInclude
   - Фильтрация включенных данных
   - Проекции

   Явная загрузка:
   - Load
   - LoadAsync
   - Collection
   - Reference

   Оптимизация запросов:
   - AsNoTracking
   - Select проекции
   - Разделение запросов
   - Кэширование

   Работа с транзакциями:
   - BeginTransaction
   - Commit
   - Rollback
   - SavePoints

   Практическая часть:
   - Создание моделей и контекста
   - Настройка отношений
   - Оптимизация запросов
   - Работа с транзакциями 

4.2. SQL Server
   Типы данных:
   - Числовые (int, decimal, float)
   - Строковые (char, varchar, nvarchar)
   - Дата и время (datetime, date, time)
   - Бинарные (binary, varbinary)
   - Специальные (uniqueidentifier, xml, json)
   - Пользовательские типы

   Индексы:
   - Кластерные и некластерные
   - Составные индексы
   - Включенные столбцы
   - Фильтрованные индексы
   - Columnstore индексы
   - Оптимизация индексов

   Транзакции:
   - ACID свойства
   - Уровни изоляции
   - Блокировки
   - Deadlocks
   - Savepoints
   - Распределенные транзакции

   Хранимые процедуры:
   - Создание и выполнение
   - Параметры
   - Возвращаемые значения
   - Оптимизация
   - Перекомпиляция
   - Безопасность

   Функции:
   - Скалярные функции
   - Табличные функции
   - Встроенные функции
   - Пользовательские функции
   - Оптимизация
   - Ограничения

   Оптимизация запросов:
   - Планы выполнения
   - Статистика
   - Подсказки (hints)
   - Перезапись запросов
   - Параметризация
   - Кэширование планов

   Планы выполнения:
   - Анализ планов
   - Операторы
   - Стоимость операций
   - Предупреждения
   - Оптимизация
   - Мониторинг

   Практическая часть:
   - Создание индексов
   - Оптимизация запросов
   - Работа с транзакциями
   - Анализ планов выполнения 